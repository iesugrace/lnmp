Linux + Nginx + MySQL + Python + uWSGI + Django


Description
-----------

This document demonstrates these:
1. Integrate Django with Nginx using uWSGI,
2. Make the Django project work with MySQL.

Time to complete this procedure is about 40 minutes,
exclude the time for downloading packages, on a minimum
installation of Ubuntu server 14.04.3 amd64.



Environment
-----------

OS: Ubuntu 14.04.3 LTS x86_64
Nginx: 1.4.6
MySQL: 5.5.46
Python: 2.7.6
uWSGI: 2.0.11.2
Django: 1.8.5



Index
----------

1. Install Nginx
2. Install MySQL
3. Install pip tool
4. Install uWSGI and test
    4.1 Install
    4.2 Create a file test.py
    4.3 Then run http server
    4.4 Access http://127.0.0.1 and you shall see the 'Hello world'
5. Install Django and test
    5.1 Install Django
    5.2 Create a project to test Django
    5.3 Run the Django site through uWSGI
6. Integrate a Django site with Nginx using uWSGI
    6.1 Create a Django project
    6.2 Copy Nginx's uwsgi_params file to our project
    6.3 Create an Nginx site config file
    6.4 Make the Nginx config file available for Nginx server
    6.5 Prepare the static files for Django admin module
        6.5.1 Add the following one line to the end of settings.py
        6.5.2 Copy the static file to the site
    6.6 Reload the Nginx server
    6.7 Create a uWSGI config file
    6.8 Run the uwsgi process
    6.9 Test
7. Integrate Django with MySQL
    7.1 Install MySQL module for Python
    7.2 Try to import module 'MySQLdb' from an interactive Python shell,
    7.3 Edit the Django site settings file, set the DATABASES
    7.4 Prepare the database
    7.5 Create an APP in the Django project to test the DB setting
    7.6 Install the APP to the site
    7.7 Edit the APP's models file, fill some database control code
    7.8 Check the syntax for the model, if OK, go to next step
    7.9 Create database tables for the model
    7.10 Test basic database operations
        7.10.1 Create
        7.10.2 Query
        7.10.3 Update
        7.10.4 Delete



Procedure
----------

1. Install Nginx
    # apt-get install nginx
    # service nginx start           # start the nginx service
    # elinks http://127.0.0.1       # shall see the nginx page


2. Install MySQL
    # apt-get install mysql-server

    The service shall be started automatically, if not, run this:
    # service mysql start


3. Install pip tool
    # apt-get install python-pip

    The pip tool can be installed in this way also:
    # wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
    # python get-pip.py


4. Install uWSGI and test
    4.1 Install
        # apt-get install python-dev
        # export LDFLAGS="-Xlinker --no-as-needed"
        # pip install uwsgi

    4.2 Create a file test.py with content in between the dash lines
        ------------------------------------------------------------
        def application(env, start_response):
            start_response('200 OK', [('Content-Type','text/html')])
            return "Hello world"
        ------------------------------------------------------------

    4.3 Then run this shell command:
        # uwsgi --http :8001 --wsgi-file test.py

    4.4 Access http://127.0.0.1 and you shall see the 'Hello world'
        # elinks http://127.0.0.1:8001


5. Install Django and test
    5.1 Install Django
        # pip install Django

    5.2 Create a project to test Django
        # cd /tmp
        # django-admin.py startproject testsite     # create a project
        # cd testsite
        # python manage.py runserver 0.0.0.0:8001   # run the http server
        # elinks http://127.0.0.1:8001              # shall see the Django welcome page

    5.3 Run the Django site through uWSGI
        When we created the Django project, a wsgi module was created automatically,
        located here: /tmp/testsite/testsite/wsgi.py
        The following commands will run the http server as well:
        # cd /tmp/testsite
        # uwsgi --http :8001 --module testsite.wsgi:application


6. Integrate a Django site with Nginx using uWSGI
    6.1 Create a Django project
        # mkdir /python_sites
        # cd /python_sites
        # django-admin.py startproject mysite

        These commands will create a Django project with these files:
        /python_sites/mysite
        /python_sites/mysitpython manage.py
        /python_sites/mysite/mysite
        /python_sites/mysite/mysite/urls.py
        /python_sites/mysite/mysite/settings.py
        /python_sites/mysite/mysite/__init__.py
        /python_sites/mysite/mysite/wsgi.py

    6.2 Copy Nginx's uwsgi_params file to our project
        # cp /etc/nginx/uwsgi_params /python_sites/mysite/

    6.3 Create an Nginx site config file with the contents in between the dashes
        # vi /python_sites/mysite/mysite_nginx.conf
        ---------------------------------------------------------------------------------
        # mysite_nginx.conf

        # the upstream component nginx needs to connect to
        upstream django {
            server unix:///python_sites/mysite/mysite.sock;
        }

        # configuration of the server
        server {
            # the port your site will be served on
            listen      8001;

            # the domain name it will serve for
            server_name 127.0.0.1; # shall use the public IP for production
            charset     utf-8;

            # max upload size
            client_max_body_size 75M;  # adjust to taste

            # Django media
            #location /media  {
            #    alias /python_sites/mysite/media;  # media files
            #}

            # Django static files
            location /static {
                alias /python_sites/mysite/static; # static files
            }

            # Finally, send all non-media requests to the Django server.
            location / {
                uwsgi_pass  django;
                include     /python_sites/mysite/uwsgi_params;
            }
        }
        ---------------------------------------------------------------------------------

    6.4 Make the Nginx config file available for Nginx server
        # ln -sv /python_sites/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/
        
    6.5 Prepare the static files for Django admin module
        6.5.1 Add the following one line to the end of /python_sites/mysite/mysite/settings.py
            -----------------------------------------------
            STATIC_ROOT = os.path.join(BASE_DIR, "static")
            -----------------------------------------------
        6.5.2 Copy the static file to the site
            # python manage.py collectstatic

    6.6 Reload the Nginx server
        # service nginx reload

    6.7 Create a uWSGI config file with the contents in between the dashes
        # vi /python_sites/mysite/mysite_uwsgi.ini
        ---------------------------------------------------------------------------------
        # mysite_uwsgi.ini file
        [uwsgi]
        #
        # Django-related settings
        # the base directory (full path)
        chdir           = /python_sites/mysite
        # Django's wsgi file
        module          = mysite.wsgi:application
        # the virtualenv (full path)
        #home            = /path/to/virtualenv
        #
        # process-related settings
        # master
        master          = true
        # maximum number of worker processes
        processes       = 3
        # the socket (use the full path to be safe)
        socket          = /python_sites/mysite/mysite.sock
        # ... with appropriate permissions - may be needed
        chmod-socket    = 666
        # clear environment on exit
        vacuum          = true
        ---------------------------------------------------------------------------------

    6.8 Run the uwsgi process
        # uwsgi --ini /python_sites/mysite/mysite_uwsgi.ini

    6.9 With the Nginx server and the uwsgi process running, the Python website is ready
        # elinks http://127.0.0.1:8001


    Nginx + Django STRUCTURE:

        Nginx --> /etc/nginx/sites-enabled/mysite_nginx.conf --> 

        --> /python_sites/mysite/mysite.sock --> uWSGI -->

        --> /python_sites/mysite/mysite/wsgi.py --> Django site


7. Integrate Django with MySQL
    7.1 Install MySQL module for Python
        # apt-get install python-mysqldb

    7.2 Try to import module 'MySQLdb' from an interactive Python shell,
        if no error occurrs, then it's installed properly.

    7.3 Edit the Django site settings file, set the DATABASES:
        # vi /python_sites/mysite/mysite/settings.py
        ---------------------------------------------------------------------------------
        DATABASES = { 
            'default': {
                # 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'django',               # database name
                'USER': 'django',               # user name for login to database
                'PASSWORD': 'django',           # password for login to database
                'HOST': '127.0.0.1',            # host't IP address
                'PORT': '3306',                 # empty for default.
            }   
        }
        ---------------------------------------------------------------------------------

    7.4 Prepare the database
        Run these SQL commands on the MySQL server:
        >> create database django default character set utf8;
        >> create user django@localhost identified by 'django';
        >> grant all on django.* to django@localhost;

    7.5 Create an APP in the Django project to test the DB setting
        # cd /python_sites/mysite
        # django-admin.py startapp myapp       # create an APP in the current directory

    7.6 Install the APP to the site
        Edit file /python_sites/mysite/mysite/settings.py, add the APP
        named 'myapp' to the end of the list, it will look like this:

        INSTALLED_APPS = ( 
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'myapp',
        )

    7.7 Edit the APP's models file, fill some database control code
        # vi myapp/models.py
        ---------------------------------------------------------------------------------
        # -*- coding: utf-8 -*-
        
        from django.db import models
        #
        # Create your models here.

        class Company(models.Model):
            name    = models.CharField('name' ,max_length=30)
            address = models.CharField('address', max_length=50)
            tel     = models.CharField('tel', max_length=15, blank=True)
            def __unicode__(self):
                return  '%s %s %s' % (self.name, self.address, self.tel)

        class Product(models.Model):
            name        = models.CharField('name', max_length=30)
            price       = models.FloatField('price')
            stock       = models.IntegerField('stock')
            company     = models.ForeignKey(Company)
            create_date = models.DateField('create_date')
            def __unicode__(self):
                return self.name
            # other options related to specific model
            class Meta:
                ordering = ['create_date']
        ---------------------------------------------------------------------------------

    7.8 Check the syntax for the model, if OK, go to next step
        # cd /python_sites/mysite
        # python manage.py check

    7.9 Create database tables for the model
        # cd /python_sites/mysite
        # python manage.py makemigrations
        # python manage.py migrate

    7.10 Test basic database operations
        Run command 'python manage.py shell' to start a shell
        # cd /python_sites/mysite       # the right place for import
        # python manage.py shell
        >>> from myapp.models import Company, Product

        7.10.1 Create
            >>> c = Company(name='Company1', address='addr1', tel=1234)
            >>> c.save()

        7.10.2 Query
            >>> company_list = Company.objects.all()
            >>> company_list

        7.10.3 Update
            >>> c = Company.objects.get(name='Company1')
            >>> c.tel = 3333
            >>> c.save()

        7.10.4 Delete
            >>> c = Company.objects.get(name='Company1')
            >>> c.delete()
